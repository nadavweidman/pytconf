- add support for config file in yaml.

- add libraries ability to either:
	- commands
	or
        - flags to other commands
	examples:
	- pylogconf could add a command to show the current logging configuration
	- pylogconf could add a --loglevel=[value] to every other command.

- add ability to set the name of the current applcation on the terminal.
	what does that mean?

- add help, write config file, show config, bash completions and more.

- add dynamic loading of the actual commands to make interactions faster.
- add plugin based system to discover commands automatically with support for auto loading.

- add the option to write a config file with all of the current values.
	this option could be used by programs who want to install a config file with all the defaults.

- think again about why we have multiple Config entries. If we had just one config, or just
	one module
	then naturally we would have no name space collision since python or the editor
	will take care not to allow name collisions.

- think again about the problem of parameters without default values. If different commands
	have different such parameters (and they do), the each command must specify which
	such parameters it needs. The problem with this is that these parameters must not just
	be used using the natural syntax: Config.prop since this will allow to use it when it
	is not set.

	Is it better to inject these parameters to the top level and trickle them down?
	Maybe that is the case.

	Think about it.

- during parsing of command line already check that the argument exists.
	For instance:
	$ app -h
	where h is not an argument, should not product an error:
	h needs a follow up argument
	but rather
	h is not a known argument

- allow arguments to dictate how many arguments they consume from the command line following them
	This will allow booleans to not consume any
	And other arguments to consume more (like Name and Family name).
	When parsing the line you check if the argument exists, and if it exists then
	you look up how many arguments it consumes.
	How will bool consume only a single argument?
	bool will overload a hook where if the flag is called "foo" then it will
	register itself also as "nofoo" and when translating to value you also get the flag
	that triggered you.
	actually each version of registration (foo, nofoo) could have a different number
	of arguments consumed.
	This will enable --fooreverse to specify reverse of the default
	and --fooeval "not bar"
	to give foo the reverse value of bar.

- do better work with colorizing on the terminal.
	only emit color if we are printing to a terminal,
	otherwise just write text.
- make it easier to use pytconf.
	- Enable not to define groups of commands.
	- Enable not to mark the main function.
	- Enable not to pass anything to the @register functions
	in which case they will require (all or no?) configs.
	- Enable to overwrite the name of the function by passing a parameters to @register.
- should we have a parameter called "force_free_args_num" for applications where you *must*
	enter at least 1 or more arguments?
	what about max free args?
- add a "reset" method to the 'Config' object and a general method
	of pytconf which is 'reset_all'.
	This will enable to reset all objects to their default behaviour.
	This will be good for web servers and for setting up repeatable tests.
- once myenv supports more than one virtual env have this project
	have:
		- virtual env for 2.7 running.
		- virtual env for 3.6 running.
		- virtual env for development tools (pypitools etc).
- make each parameters have a suggester class attached. This will suggest
	values to a user that needs to put this parameter in.
- make each parameter have a gui attached to be filled by gui.
	this means that I could run an app that needs parameters and just fill
	then out using tui.
- have each class of configuration remember recent values users used to fill
	them out. The we can use them for:
	- auto filling the boxes in the tui for running the code.
	- showing them in the --help to remind people of latest values.
	- reminding people of latest values.
		app --filename @show_recent
	Things to think about:
	- how can we share recent values between parameters?
	For instance: I want recent files to be shared between:
		ConfigInput.filename
	and:
		ConfigOutput.filename
	how do we achieve that?
- make sure that we can easily create a app based on pytconf without much
	fanfare (groups, main etc).
